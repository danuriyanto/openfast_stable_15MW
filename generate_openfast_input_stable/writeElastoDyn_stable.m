function writeElastoDyn_stable(ElastoDyn)
 A(1,1) = {'------- ELASTODYN v1.03.* INPUT FILE -------------------------------------------	'};
A(end+1,1) = {['IEA 15 MW offshore reference model monopile configuration	']};
A(end+1,1) = {['---------------------- SIMULATION CONTROL --------------------------------------	']};
A(end+1,1) = {['False Echo - Echo input data to "<RootName>.ech" (flag)	']};
A(end+1,1) = {['3 Method - Integration method: {1: RK4, 2: AB4, or 3: ABM4} (-)	']};
A(end+1,1) = {['"default" DT Integration time step (s)	']};
A(end+1,1) = {['---------------------- DEGREES OF FREEDOM --------------------------------------	']};
A(end+1,1) = {['True FlapDOF1 - First flapwise blade mode DOF (flag)	']};
A(end+1,1) = {['True FlapDOF2 - Second flapwise blade mode DOF (flag)	']};
A(end+1,1) = {['True EdgeDOF - First edgewise blade mode DOF (flag)	']};
A(end+1,1) = {['False TeetDOF - Rotor-teeter DOF (flag) [unused for 3 blades]	']};
A(end+1,1) = {['False DrTrDOF - Drivetrain rotational-flexibility DOF (flag)	']};
A(end+1,1) = {[ElastoDyn.GenDOF ' GenDOF - Generator DOF (flag)	']};
A(end+1,1) = {['False YawDOF - Yaw DOF (flag)	']};
A(end+1,1) = {['True TwFADOF1 - First fore-aft tower bending-mode DOF (flag)	']};
A(end+1,1) = {['True TwFADOF2 - Second fore-aft tower bending-mode DOF (flag)	']};
A(end+1,1) = {['True TwSSDOF1 - First side-to-side tower bending-mode DOF (flag)	']};
A(end+1,1) = {['True TwSSDOF2 - Second side-to-side tower bending-mode DOF (flag)	']};
A(end+1,1) = {['True PtfmSgDOF - Platform horizontal surge translation DOF (flag)	']};
A(end+1,1) = {['True PtfmSwDOF - Platform horizontal sway translation DOF (flag)	']};
A(end+1,1) = {['True PtfmHvDOF - Platform vertical heave translation DOF (flag)	']};
A(end+1,1) = {['True PtfmRDOF - Platform roll tilt rotation DOF (flag)	']};
A(end+1,1) = {['True PtfmPDOF - Platform pitch tilt rotation DOF (flag)	']};
A(end+1,1) = {['True PtfmYDOF - Platform yaw rotation DOF (flag)	']};
A(end+1,1) = {['---------------------- INITIAL CONDITIONS --------------------------------------	']};
A(end+1,1) = {['0.0 OoPDefl - Initial out-of-plane blade-tip displacement (meters)	']};
A(end+1,1) = {['0.0 IPDefl - Initial in-plane blade-tip deflection (meters)	']};
A(end+1,1) = {[num2str(ElastoDyn.BlPitch) ' BlPitch(1) - Blade 1 initial pitch (degrees)	']};
A(end+1,1) = {[num2str(ElastoDyn.BlPitch) ' BlPitch(2) - Blade 2 initial pitch (degrees)	']};
A(end+1,1) = {[num2str(ElastoDyn.BlPitch) ' BlPitch(3) - Blade 3 initial pitch (degrees) [unused for 2 blades]	']};
A(end+1,1) = {['0.0 TeetDefl - Initial or fixed teeter angle (degrees) [unused for 3 blades]	']};
A(end+1,1) = {[num2str(ElastoDyn.Azimuth) '	Azimuth - Initial azimuth angle for blade 1 (degrees)	']};
A(end+1,1) = {[num2str(ElastoDyn.RotSpeed) '	 RotSpeed - Initial or fixed rotor speed (rpm)	']};
A(end+1,1) = {[num2str(ElastoDyn.NacYaw) '	 NacYaw - Initial or fixed nacelle-yaw angle (degrees)	']};
A(end+1,1) = {['0.0 TTDspFA - Initial fore-aft tower-top displacement (meters)	']};
A(end+1,1) = {['0.0 TTDspSS - Initial side-to-side tower-top displacement (meters)	']};
A(end+1,1) = {['0.0 PtfmSurge - Initial or fixed horizontal surge translational displacement of platform (meters)	']};
A(end+1,1) = {['0.0 PtfmSway - Initial or fixed horizontal sway translational displacement of platform (meters)	']};
A(end+1,1) = {['0.0 PtfmHeave - Initial or fixed vertical heave translational displacement of platform (meters)	']};
A(end+1,1) = {['0.0 PtfmRoll - Initial or fixed roll tilt rotational displacement of platform (degrees)	']};
A(end+1,1) = {['0.0 PtfmPitch - Initial or fixed pitch tilt rotational displacement of platform (degrees)	']};
A(end+1,1) = {['0.0 PtfmYaw - Initial or fixed yaw rotational displacement of platform (degrees)	']};
A(end+1,1) = {['---------------------- TURBINE CONFIGURATION -----------------------------------	']};
A(end+1,1) = {['3 NumBl - Number of blades (-)	']};
A(end+1,1) = {['120.97 TipRad - The distance from the rotor apex to the blade tip (meters)	']};
A(end+1,1) = {['3.97 HubRad - The distance from the rotor apex to the blade root (meters)	']};
A(end+1,1) = {['-4.0 PreCone(1) - Blade 1 cone angle (degrees)	']};
A(end+1,1) = {['-4.0 PreCone(2) - Blade 2 cone angle (degrees)	']};
A(end+1,1) = {['-4.0 PreCone(3) - Blade 3 cone angle (degrees) [unused for 2 blades]	']};
A(end+1,1) = {['0.0 HubCM - Distance from rotor apex to hub mass [positive downwind] (meters)	']};
A(end+1,1) = {['0.0 UndSling - Undersling length [distance from teeter pin to the rotor apex] (meters) [unused for 3 blades]	']};
A(end+1,1) = {['0.0 Delta3 - Delta-3 angle for teetering rotors (degrees) [unused for 3 blades]	']};
A(end+1,1) = {['0.0 AzimB1Up - Azimuth value to use for I/O when blade 1 points up (degrees)	']};
A(end+1,1) = {['-12.097571763912535 OverHang - Distance from yaw axis to rotor apex [3 blades] or teeter pin [2 blades] (meters)	']};
A(end+1,1) = {['0.0 ShftGagL - Distance from rotor apex [3 blades] or teeter pin [2 blades] to shaft strain gages [positive for upwind rotors] (meters)	']};
A(end+1,1) = {['-6.0 ShftTilt - Rotor shaft tilt angle (degrees)	']};
A(end+1,1) = {['-4.720 NacCMxn - Downwind distance from the tower-top to the nacelle CM (meters)	']};
A(end+1,1) = {['0.0 NacCMyn - Lateral distance from the tower-top to the nacelle CM (meters)	']};
A(end+1,1) = {['4.275 NacCMzn - Vertical distance from the tower-top to the nacelle CM (meters)	']};
A(end+1,1) = {['0.0 NcIMUxn - Downwind distance from the tower-top to the nacelle IMU (meters)	']};
A(end+1,1) = {['0.0 NcIMUyn - Lateral distance from the tower-top to the nacelle IMU (meters)	']};
A(end+1,1) = {['0.0 NcIMUzn - Vertical distance from the tower-top to the nacelle IMU (meters)	']};
A(end+1,1) = {['4.349459414248071 Twr2Shft - Vertical distance from the tower-top to the rotor shaft (meters)	']};
A(end+1,1) = {['144.386 TowerHt - Height of tower above ground level [onshore] or MSL [offshore] (meters)	']};
A(end+1,1) = {['15. TowerBsHt - Height of tower base above ground level [onshore] or MSL [offshore] (meters)	']};
A(end+1,1) = {['0.0 PtfmCMxt - Downwind distance from the ground level [onshore] or MSL [offshore] to the platform CM (meters)	']};
A(end+1,1) = {['0.0 PtfmCMyt - Lateral distance from the ground level [onshore] or MSL [offshore] to the platform CM (meters)	']};
A(end+1,1) = {['15. PtfmCMzt - Vertical distance from the ground level [onshore] or MSL [offshore] to the platform CM (meters)	']};
A(end+1,1) = {['15. PtfmRefzt - Vertical distance from the ground level [onshore] or MSL [offshore] to the platform reference point (meters)	']};
A(end+1,1) = {['---------------------- MASS AND INERTIA ----------------------------------------	']};
A(end+1,1) = {['0.0 TipMass(1) - Tip-brake mass, blade 1 (kg)	']};
A(end+1,1) = {['0.0 TipMass(2) - Tip-brake mass, blade 2 (kg)	']};
A(end+1,1) = {['0.0 TipMass(3) - Tip-brake mass, blade 3 (kg) [unused for 2 blades]	']};
A(end+1,1) = {['69360 HubMass - Hub mass (kg)	']};
A(end+1,1) = {['973520 HubIner - Hub inertia about rotor axis [3 blades] or teeter axis [2 blades] (kg m^2)	']};
A(end+1,1) = {['1836784 GenIner - Generator inertia about HSS (kg m^2)	']};
A(end+1,1) = {['646895 NacMass - Nacelle mass (kg)	']};
A(end+1,1) = {['29600436 NacYIner - Nacelle inertia about yaw axis (kg m^2)	']};
A(end+1,1) = {['28280 YawBrMass - Yaw bearing mass (kg)	']};
A(end+1,1) = {['0.0 PtfmMass - Platform mass (kg)	']};
A(end+1,1) = {['0.0 PtfmRIner - Platform inertia for roll tilt rotation about the platform CM (kg m^2)	']};
A(end+1,1) = {['0.0 PtfmPIner - Platform inertia for pitch tilt rotation about the platform CM (kg m^2)	']};
A(end+1,1) = {['100000000.0 PtfmYIner - Platform inertia for yaw rotation about the platform CM (kg m^2)	']};
A(end+1,1) = {['---------------------- BLADE ---------------------------------------------------	']};
A(end+1,1) = {['50 BldNodes - Number of blade nodes (per blade) used for analysis (-)	']};
A(end+1,1) = {['"../IEA-15-240-RWT/IEA-15-240-RWT_ElastoDyn_blade.dat" BldFile1 - Name of file containing properties for blade 1 (quoted string)	']};
A(end+1,1) = {['"../IEA-15-240-RWT/IEA-15-240-RWT_ElastoDyn_blade.dat" BldFile2 - Name of file containing properties for blade 2 (quoted string)	']};
A(end+1,1) = {['"../IEA-15-240-RWT/IEA-15-240-RWT_ElastoDyn_blade.dat" BldFile3 - Name of file containing properties for blade 3 (quoted string) [unused for 2 blades]	']};
A(end+1,1) = {['---------------------- ROTOR-TEETER --------------------------------------------	']};
A(end+1,1) = {['0 TeetMod - Rotor-teeter spring/damper model {0: none, 1: standard, 2: user-defined from routine UserTeet} (switch) [unused for 3 blades]	']};
A(end+1,1) = {['0.0 TeetDmpP - Rotor-teeter damper position (degrees) [used only for 2 blades and when TeetMod=1]	']};
A(end+1,1) = {['0.0 TeetDmp - Rotor-teeter damping constant (N-m/(rad/s)) [used only for 2 blades and when TeetMod=1]	']};
A(end+1,1) = {['0.0 TeetCDmp - Rotor-teeter rate-independent Coulomb-damping moment (N-m) [used only for 2 blades and when TeetMod=1]	']};
A(end+1,1) = {['0.0 TeetSStP - Rotor-teeter soft-stop position (degrees) [used only for 2 blades and when TeetMod=1]	']};
A(end+1,1) = {['0.0 TeetHStP - Rotor-teeter hard-stop position (degrees) [used only for 2 blades and when TeetMod=1]	']};
A(end+1,1) = {['0.0 TeetSSSp - Rotor-teeter soft-stop linear-spring constant (N-m/rad) [used only for 2 blades and when TeetMod=1]	']};
A(end+1,1) = {['0.0 TeetHSSp - Rotor-teeter hard-stop linear-spring constant (N-m/rad) [used only for 2 blades and when TeetMod=1]	']};
A(end+1,1) = {['---------------------- DRIVETRAIN ----------------------------------------------	']};
A(end+1,1) = {['100.0 GBoxEff - Gearbox efficiency (%)	']};
A(end+1,1) = {['1.0 GBRatio - Gearbox ratio (-)	']};
A(end+1,1) = {['51140939610.0 DTTorSpr - Drivetrain torsional spring (N-m/rad)	']};
A(end+1,1) = {['42676833.0 DTTorDmp - Drivetrain torsional damper (N-m/(rad/s))	']};
A(end+1,1) = {['---------------------- FURLING -------------------------------------------------	']};
A(end+1,1) = {['False Furling - Read in additional model properties for furling turbine (flag) [must currently be FALSE)	']};
A(end+1,1) = {['"unused" FurlFile - Name of file containing furling properties (quoted string) [unused when Furling=False]	']};
A(end+1,1) = {['---------------------- TOWER ---------------------------------------------------	']};
A(end+1,1) = {['20 TwrNodes - Number of tower nodes used for analysis (-)	']};
A(end+1,1) = {['"../IEA-15-240-RWT/IEA-15-240-RWT-Monopile_ElastoDyn_tower.dat" TwrFile - Name of file containing tower properties (quoted string)	']};
A(end+1,1) = {['---------------------- OUTPUT --------------------------------------------------	']};
A(end+1,1) = {['True SumPrint - Print summary data to "<RootName>.sum" (flag)	']};
A(end+1,1) = {['1 OutFile - Switch to determine where output will be placed: {1: in module output file only; 2: in glue code output file only; 3: both} (currently unused)	']};
A(end+1,1) = {['True TabDelim - Use tab delimiters in text tabular output file? (flag) (currently unused)	']};
A(end+1,1) = {['"ES10.3E2" OutFmt - Format used for text tabular output (except time). Resulting field should be 10 characters. (quoted string) (currently unused)	']};
A(end+1,1) = {['0.0 TStart - Time to begin tabular output (s) (currently unused)	']};
A(end+1,1) = {['1 DecFact - Decimation factor for tabular output {1: output every time step} (-) (currently unused)	']};
A(end+1,1) = {['1 NTwGages - Number of tower nodes that have strain gages for output [0 to 9] (-)	']};
A(end+1,1) = {['20 TwrGagNd - List of tower nodes that have strain gages [1 to TwrNodes] (-) [unused if NTwGages=0] TwrGagNd - List of tower nodes that have strain gages [1 to TwrNodes] (-) [unused if NTwGages=0] TwrGagNd - List of tower nodes that have strain gages [1 to TwrNodes] (-) [unused if NTwGages=0]	']};
A(end+1,1) = {['3 NBlGages - Number of blade nodes that have strain gages for output [0 to 9] (-)	']};
A(end+1,1) = {['5, 9, 13 BldGagNd - List of blade nodes that have strain gages [1 to BldNodes] (-) [unused if NBlGages=0] BldGagNd - List of blade nodes that have strain gages [1 to BldNodes] (-) [unused if NBlGages=0] BldGagNd - List of blade nodes that have strain gages [1 to BldNodes] (-) [unused if NBlGages=0]	']};
A(end+1,1) = {['OutList - The next line(s) contains a list of output parameters. See OutListParameters.xlsx for a listing of available output channels, (-)	']};
A(end+1,1) = {['"Azimuth"	']};
A(end+1,1) = {['"BldPitch1"	']};
A(end+1,1) = {['"BldPitch2"	']};
A(end+1,1) = {['"BldPitch3"	']};
A(end+1,1) = {['"GenSpeed"	']};
A(end+1,1) = {['"IPDefl1"	']};
A(end+1,1) = {['"LSSGagMya"	']};
A(end+1,1) = {['"LSSGagMza"	']};
A(end+1,1) = {['"LSSTipMys"	']};
A(end+1,1) = {['"LSSTipMzs"	']};
A(end+1,1) = {['"LSShftFys"	']};
A(end+1,1) = {['"LSShftFzs"	']};
A(end+1,1) = {['"NacYaw"	']};
A(end+1,1) = {['"NcIMUTAxs"	']};
A(end+1,1) = {['"NcIMUTAys"	']};
A(end+1,1) = {['"NcIMUTAzs"	']};
A(end+1,1) = {['"OoPDefl1"	']};
A(end+1,1) = {['"PtfmHeave"	']};
A(end+1,1) = {['"PtfmPitch"	']};
A(end+1,1) = {['"PtfmRoll"	']};
A(end+1,1) = {['"PtfmSurge"	']};
A(end+1,1) = {['"PtfmSway"	']};
A(end+1,1) = {['"PtfmYaw"	']};
A(end+1,1) = {['"RootFxb1"	']};
A(end+1,1) = {['"RootFxb2"	']};
A(end+1,1) = {['"RootFxb3"	']};
A(end+1,1) = {['"RootFxc1"	']};
A(end+1,1) = {['"RootFxc2"	']};
A(end+1,1) = {['"RootFxc3"	']};
A(end+1,1) = {['"RootFyb1"	']};
A(end+1,1) = {['"RootFyb2"	']};
A(end+1,1) = {['"RootFyb3"	']};
A(end+1,1) = {['"RootFyc1"	']};
A(end+1,1) = {['"RootFyc2"	']};
A(end+1,1) = {['"RootFyc3"	']};
A(end+1,1) = {['"RootFzb1"	']};
A(end+1,1) = {['"RootFzb2"	']};
A(end+1,1) = {['"RootFzb3"	']};
A(end+1,1) = {['"RootFzc1"	']};
A(end+1,1) = {['"RootFzc2"	']};
A(end+1,1) = {['"RootFzc3"	']};
A(end+1,1) = {['"RootMxb1"	']};
A(end+1,1) = {['"RootMxb2"	']};
A(end+1,1) = {['"RootMxb3"	']};
A(end+1,1) = {['"RootMxc1"	']};
A(end+1,1) = {['"RootMxc2"	']};
A(end+1,1) = {['"RootMxc3"	']};
A(end+1,1) = {['"RootMyb1"	']};
A(end+1,1) = {['"RootMyb2"	']};
A(end+1,1) = {['"RootMyb3"	']};
A(end+1,1) = {['"RootMyc1"	']};
A(end+1,1) = {['"RootMyc2"	']};
A(end+1,1) = {['"RootMyc3"	']};
A(end+1,1) = {['"RootMzb1"	']};
A(end+1,1) = {['"RootMzb2"	']};
A(end+1,1) = {['"RootMzb3"	']};
A(end+1,1) = {['"RootMzc1"	']};
A(end+1,1) = {['"RootMzc2"	']};
A(end+1,1) = {['"RootMzc3"	']};
A(end+1,1) = {['"RotSpeed"	']};
A(end+1,1) = {['"RotThrust"	']};
A(end+1,1) = {['"RotTorq"	']};
A(end+1,1) = {['"Spn1MLxb1"	']};
A(end+1,1) = {['"Spn1MLyb1"	']};
A(end+1,1) = {['"Spn2MLxb1"	']};
A(end+1,1) = {['"Spn2MLyb1"	']};
A(end+1,1) = {['"Spn3MLxb1"	']};
A(end+1,1) = {['"Spn3MLyb1"	']};
A(end+1,1) = {['"Spn4MLxb1"	']};
A(end+1,1) = {['"Spn4MLyb1"	']};
A(end+1,1) = {['"Spn5MLxb1"	']};
A(end+1,1) = {['"Spn5MLyb1"	']};
A(end+1,1) = {['"Spn6MLxb1"	']};
A(end+1,1) = {['"Spn6MLyb1"	']};
A(end+1,1) = {['"Spn7MLxb1"	']};
A(end+1,1) = {['"Spn7MLyb1"	']};
A(end+1,1) = {['"Spn8MLxb1"	']};
A(end+1,1) = {['"Spn8MLyb1"	']};
A(end+1,1) = {['"Spn9MLxb1"	']};
A(end+1,1) = {['"Spn9MLyb1"	']};
A(end+1,1) = {['"TTDspTwst"	']};
A(end+1,1) = {['"TipDxb1"	']};
A(end+1,1) = {['"TipDxb2"	']};
A(end+1,1) = {['"TipDxb3"	']};
A(end+1,1) = {['"TipDxc1"	']};
A(end+1,1) = {['"TipDxc2"	']};
A(end+1,1) = {['"TipDxc3"	']};
A(end+1,1) = {['"TipDyb1"	']};
A(end+1,1) = {['"TipDyb2"	']};
A(end+1,1) = {['"TipDyb3"	']};
A(end+1,1) = {['"TipDyc1"	']};
A(end+1,1) = {['"TipDyc2"	']};
A(end+1,1) = {['"TipDyc3"	']};
A(end+1,1) = {['"TipDzb1"	']};
A(end+1,1) = {['"TipDzb2"	']};
A(end+1,1) = {['"TipDzb3"	']};
A(end+1,1) = {['"TipDzc1"	']};
A(end+1,1) = {['"TipDzc2"	']};
A(end+1,1) = {['"TipDzc3"	']};
A(end+1,1) = {['"TwHt1TPxi"	']};
A(end+1,1) = {['"TwHt1TPyi"	']};
A(end+1,1) = {['"TwrBsFxt"	']};
A(end+1,1) = {['"TwrBsFyt"	']};
A(end+1,1) = {['"TwrBsFzt"	']};
A(end+1,1) = {['"TwrBsMxt"	']};
A(end+1,1) = {['"TwrBsMyt"	']};
A(end+1,1) = {['"TwrBsMzt"	']};
A(end+1,1) = {['"TwstDefl1"	']};
A(end+1,1) = {['"YawBrFxp"	']};
A(end+1,1) = {['"YawBrFyp"	']};
A(end+1,1) = {['"YawBrFzp"	']};
A(end+1,1) = {['"YawBrMxp"	']};
A(end+1,1) = {['"YawBrMyp"	']};
A(end+1,1) = {['"YawBrMzp"	']};
A(end+1,1) = {['"YawBrTDxt"	']};
A(end+1,1) = {['"YawBrTDyt"	']};
A(end+1,1) = {['"YawBrTDxp"	']};
A(end+1,1) = {['"YawBrTDyp"	']};
A(end+1,1) = {['"YawBrTDzp"	']};
A(end+1,1) = {['END of input file (the word "END" must appear in the first 3 columns of this last OutList line)	']};
A(end+1,1) = {['---------------------- NODE OUTPUTS --------------------------------------------	']};
A(end+1,1) = {['1 BldNd_BladesOut - Blades to output	']};
A(end+1,1) = {['99 BldNd_BlOutNd - Blade nodes on each blade (currently unused)	']};
A(end+1,1) = {['OutList - The next line(s) contains a list of output parameters. See OutListParameters.xlsx, ElastoDyn_Nodes tab for a listing of available output channels, (-)	']};
A(end+1,1) = {['"TDx" - local flapwise (translational) deflection (relative to the undeflected position) of node	']};
A(end+1,1) = {['"TDy" - local edgewise (translational) deflection (relative to the undeflected position) of node	']};
A(end+1,1) = {['"RDz"	']};
A(end+1,1) = {['END of input file (the word "END" must appear in the first 3 columns of this last OutList line)	']};
A(end+1,1) = {['---------------------------------------------------------------------------------------	']};
writecell(A,ElastoDyn.FileName,QuoteStrings="none",FileType="text",WriteMode="overwrite");
end