function writeHydroDyn_v352_stable(HydroDyn)
C(1,1) = {['	------- HydroDyn v2.03.* Input File --------------------------------------------	']};
C(end+1,1) = {['	IEA 15 MW Hydrodyn Input.	']};
C(end+1,1) = {['	True            Echo           - Echo the input file data (flag)	']};
C(end+1,1) = {['	---------------------- ENVIRONMENTAL CONDITIONS --------------------------------	']};
C(end+1,1) = {['	     "default"   WtrDens        - Water density (kg/m^3)	']};
C(end+1,1) = {['	     "default"   WtrDpth        - Water depth (meters)	']};
C(end+1,1) = {['	     "default"   MSL2SWL        - Offset between still-water level and mean sea level (meters) [positive upward; unused when WaveMod = 6; must be zero if PotMod=1 or 2]	']};
C(end+1,1) = {['	---------------------- WAVES ---------------------------------------------------	']};
C(end+1,1) = {[num2str(HydroDyn.WaveMod)   '	                WaveMod        - Incident wave kinematics model {0: none=still water, 1: regular (periodic), 1P#: regular with user-specified phase, 2: JONSWAP/Pierson-Moskowitz spectrum (irregular), 3: White noise spectrum (irregular), 4: user-defined spectrum from routine UserWaveSpctrm (irregular), 5: Externally generated wave-elevation time series, 6: Externally generated full wave-kinematics time series [option 6 is invalid for PotMod/=0]} (switch)	']};
C(end+1,1) = {[num2str(HydroDyn.WaveStMod) '	                WaveStMod      - Model for stretching incident wave kinematics to instantaneous free surface {0: none=no stretching, 1: vertical stretching, 2: extrapolation stretching, 3: Wheeler stretching} (switch) [unused when WaveMod=0 or when PotMod/=0]	']};
C(end+1,1) = {[num2str(HydroDyn.WaveTMax)  '	             WaveTMax       - Analysis time for incident wave calculations (sec) [unused when WaveMod=0; determines WaveDOmega=2Pi/WaveTMax in the IFFT]	']};
C(end+1,1) = {[num2str(HydroDyn.WaveDT)   '	             WaveDT         - Time step for incident wave calculations     (sec) [unused when WaveMod=0; 0.1<=WaveDT<=1.0 recommended; determines WaveOmegaMax=Pi/WaveDT in the IFFT]	']};
C(end+1,1) = {[num2str(HydroDyn.WaveHs)    '	                WaveHs         - Significant wave height of incident waves (meters) [used only when WaveMod=1, 2, or 3]	']};
C(end+1,1) = {[num2str(HydroDyn.WaveTp)    '	               WaveTp         - Peak-spectral period of incident waves       (sec) [used only when WaveMod=1 or 2]	']};
C(end+1,1) = {['	DEFAULT        WavePkShp      - Peak-shape parameter of incident wave spectrum (-) or DEFAULT (string) [used only when WaveMod=2; use 1.0 for Pierson-Moskowitz]	']};
C(end+1,1) = {['	       0.15708   WvLowCOff      - Low  cut-off frequency or lower frequency limit of the wave spectrum beyond which the wave spectrum is zeroed (rad/s) [unused when WaveMod=0, 1, or 6]	']};
C(end+1,1) = {['	           3.2   WvHiCOff       - High cut-off frequency or upper frequency limit of the wave spectrum beyond which the wave spectrum is zeroed (rad/s) [unused when WaveMod=0, 1, or 6]	']};
C(end+1,1) = {[num2str(HydroDyn.WaveDir) '	                WaveDir        - Incident wave propagation heading direction                         (degrees) [unused when WaveMod=0 or 6]	']};
C(end+1,1) = {['	             0   WaveDirMod     - Directional spreading function {0: none, 1: COS2S}                  (-)       [only used when WaveMod=2,3, or 4]	']};
C(end+1,1) = {['	             1   WaveDirSpread  - Wave direction spreading coefficient ( > 0 )                        (-)       [only used when WaveMod=2,3, or 4 and WaveDirMod=1]	']};
C(end+1,1) = {['	             1   WaveNDir       - Number of wave directions                                           (-)       [only used when WaveMod=2,3, or 4 and WaveDirMod=1; odd number only]	']};
C(end+1,1) = {['	            90   WaveDirRange   - Range of wave directions (full range: WaveDir +/- 1/2*WaveDirRange) (degrees) [only used when WaveMod=2,3,or 4 and WaveDirMod=1]	']};
C(end+1,1) = {[num2str(HydroDyn.WaveSeed) '	        WaveSeed(1)    - First  random seed of incident waves [-2147483648 to 2147483647]    (-)       [unused when WaveMod=0, 5, or 6]	']};
C(end+1,1) = {['	        RANLUX   WaveSeed(2)    - Second random seed of incident waves [-2147483648 to 2147483647] for intrinsic pRNG, or an alternative pRNG: "RanLux"    (-)       [unused when WaveMod=0, 5, or 6]	']};
C(end+1,1) = {['	TRUE             WaveNDAmp      - Flag for normally distributed amplitudes                            (flag)    [only used when WaveMod=2, 3, or 4]	']};
C(end+1,1) = {['	               WvKinFile      - Root name of externally generated wave data file(s)        (quoted string)    [used only when WaveMod=5 or 6]	']};
C(end+1,1) = {['	             1   NWaveElev      - Number of points where the incident wave elevations can be computed (-)       [maximum of 9 output locations]	']};
C(end+1,1) = {['	             0   WaveElevxi     - List of xi-coordinates for points where the incident wave elevations can be output (meters) [NWaveElev points, separated by commas or white space; usused if NWaveElev = 0]	']};
C(end+1,1) = {['	             0   WaveElevyi     - List of yi-coordinates for points where the incident wave elevations can be output (meters) [NWaveElev points, separated by commas or white space; usused if NWaveElev = 0]	']};
C(end+1,1) = {['	---------------------- 2ND-ORDER WAVES ----------------------------------------- [unused with WaveMod=0 or 6]	']};
C(end+1,1) = {['	True             WvDiffQTF      - Full difference-frequency 2nd-order wave kinematics (flag)	']};
C(end+1,1) = {['	True             WvSumQTF       - Full summation-frequency  2nd-order wave kinematics (flag)	']};
C(end+1,1) = {['	             0   WvLowCOffD     - Low  frequency cutoff used in the difference-frequencies (rad/s) [Only used with a difference-frequency method]	']};
C(end+1,1) = {['	       3.04292   WvHiCOffD      - High frequency cutoff used in the difference-frequencies (rad/s) [Only used with a difference-frequency method]	']};
C(end+1,1) = {['	      0.314159   WvLowCOffS     - Low  frequency cutoff used in the summation-frequencies  (rad/s) [Only used with a summation-frequency  method]	']};
C(end+1,1) = {['	           3.2   WvHiCOffS      - High frequency cutoff used in the summation-frequencies  (rad/s) [Only used with a summation-frequency  method]	']};
C(end+1,1) = {['	---------------------- CURRENT ------------------------------------------------- [unused with WaveMod=6]	']};
C(end+1,1) = {[num2str(HydroDyn.CurrMod,0) '	                CurrMod        - Current profile model {0: none=no current, 1: standard, 2: user-defined from routine UserCurrent} (switch)	']};
C(end+1,1) = {[num2str(HydroDyn.CurrSSV0,1) '	                CurrSSV0       - Sub-surface current velocity at still water level  (m/s) [used only when CurrMod=1]	']};
C(end+1,1) = {['	DEFAULT        CurrSSDir      - Sub-surface current heading direction (degrees) or DEFAULT (string) [used only when CurrMod=1]	']};
C(end+1,1) = {['	            20   CurrNSRef      - Near-surface current reference depth            (meters) [used only when CurrMod=1]	']};
C(end+1,1) = {['	             0   CurrNSV0       - Near-surface current velocity at still water level (m/s) [used only when CurrMod=1]	']};
C(end+1,1) = {['	             0   CurrNSDir      - Near-surface current heading direction         (degrees) [used only when CurrMod=1]	']};
C(end+1,1) = {['	             0   CurrDIV        - Depth-independent current velocity                 (m/s) [used only when CurrMod=1]	']};
C(end+1,1) = {['	             0   CurrDIDir      - Depth-independent current heading direction    (degrees) [used only when CurrMod=1]	']};
C(end+1,1) = {['	---------------------- FLOATING PLATFORM --------------------------------------- [unused with WaveMod=6]	']};
C(end+1,1) = {['	             0   PotMod         - Potential-flow model {0: none=no potential flow, 1: frequency-to-time-domain transforms based on WAMIT output, 2: fluid-impulse theory (FIT)} (switch)	']};
C(end+1,1) = {['	             1   ExctnMod       - Wave-excitation model {0: no wave-excitation calculation, 1: DFT, 2: state-space} (switch) [only used when PotMod=1; STATE-SPACE REQUIRES *.ssexctn INPUT FILE]	']};
C(end+1,1) = {['	             0   RdtnMod        - Radiation memory-effect model {0: no memory-effect calculation, 1: convolution, 2: state-space} (switch) [only used when PotMod=1; STATE-SPACE REQUIRES *.ss INPUT FILE]	']};
C(end+1,1) = {['	            60   RdtnTMax       - Analysis time for wave radiation kernel calculations (sec) [only used when PotMod=1 and RdtnMod>0; determines RdtnDOmega=Pi/RdtnTMax in the cosine transform; MAKE SURE THIS IS LONG ENOUGH FOR THE RADIATION IMPULSE RESPONSE FUNCTIONS TO DECAY TO NEAR-ZERO FOR THE GIVEN PLATFORM!]	']};
C(end+1,1) = {['	        0.0125   RdtnDT         - Time step for wave radiation kernel calculations (sec) [only used when PotMod=1 and ExctnMod>0 or RdtnMod>0; DT<=RdtnDT<=0.1 recommended; determines RdtnOmegaMax=Pi/RdtnDT in the cosine transform]	']};
C(end+1,1) = {['	             1   NBody          - Number of WAMIT bodies to be used (-) [>=1; only used when PotMod=1. If NBodyMod=1, the WAMIT data contains a vector of size 6*NBody x 1 and matrices of size 6*NBody x 6*NBody; if NBodyMod>1, there are NBody sets of WAMIT data each with a vector of size 6 x 1 and matrices of size 6 x 6]	']};
C(end+1,1) = {['	             1   NBodyMod       - Body coupling model {1: include coupling terms between each body and NBody in HydroDyn equals NBODY in WAMIT, 2: neglect coupling terms between each body and NBODY=1 with XBODY=0 in WAMIT, 3: Neglect coupling terms between each body and NBODY=1 with XBODY=/0 in WAMIT} (switch) [only used when PotMod=1]	']};
C(end+1,1) = {['	unused         PotFile       - Root name of potential-flow model data; WAMIT output files containing the linear, nondimensionalized, hydrostatic restoring matrix (.hst), frequency-dependent hydrodynamic added mass matrix and damping matrix (.1), and frequency- and direction-dependent wave excitation force vector per unit wave amplitude (.3) (quoted string) [1 to NBody if NBodyMod>1] [MAKE SURE THE FREQUENCIES INHERENT IN THESE WAMIT FILES SPAN THE PHYSICALLY-SIGNIFICANT RANGE OF FREQUENCIES FOR THE GIVEN PLATFORM; THEY MUST CONTAIN THE ZERO- AND INFINITE-FREQUENCY LIMITS!]	']};
C(end+1,1) = {['	             1   WAMITULEN      - Characteristic body length scale used to redimensionalize WAMIT output (meters) [1 to NBody if NBodyMod>1] [only used when PotMod=1]	']};
C(end+1,1) = {['	           0.0   PtfmRefxt      - The xt offset of the body reference point(s) from (0,0,0) (meters) [1 to NBody] [only used when PotMod=1]	']};
C(end+1,1) = {['	           0.0   PtfmRefyt      - The yt offset of the body reference point(s) from (0,0,0) (meters) [1 to NBody] [only used when PotMod=1]	']};
C(end+1,1) = {['	           0.0   PtfmRefzt      - The zt offset of the body reference point(s) from (0,0,0) (meters) [1 to NBody] [only used when PotMod=1. If NBodyMod=2,PtfmRefzt=0.0]	']};
C(end+1,1) = {['	           0.0   PtfmRefztRot   - The rotation about zt of the body reference frame(s) from xt/yt (degrees) [1 to NBody] [only used when PotMod=1]	']};
C(end+1,1) = {['	             0   PtfmVol0       - Displaced volume of water when the body is in its undisplaced position (m^3) [1 to NBody] [only used when PotMod=1; USE THE SAME VALUE COMPUTED BY WAMIT AS OUTPUT IN THE .OUT FILE!]	']};
C(end+1,1) = {['	           0.0   PtfmCOBxt      - The xt offset of the center of buoyancy (COB) from (0,0) (meters) [1 to NBody] [only used when PotMod=1]	']};
C(end+1,1) = {['	           0.0   PtfmCOByt      - The yt offset of the center of buoyancy (COB) from (0,0) (meters) [1 to NBody] [only used when PotMod=1]	']};
C(end+1,1) = {['	---------------------- 2ND-ORDER FLOATING PLATFORM FORCES ---------------------- [unused with WaveMod=0 or 6, or PotMod=0 or 2]	']};
C(end+1,1) = {['	             0   MnDrift        - Mean-drift 2nd-order forces computed                                       {0: None; [7, 8, 9, 10, 11, or 12]: WAMIT file to use} [Only one of MnDrift, NewmanApp, or DiffQTF can be non-zero. If NBody>1, MnDrift  /=8]	']};
C(end+1,1) = {["	             0   NewmanApp      - Mean- and slow-drift 2nd-order forces computed with Newman's approximation {0: None; [7, 8, 9, 10, 11, or 12]: WAMIT file to use} [Only one of MnDrift, NewmanApp, or DiffQTF can be non-zero. If NBody>1, NewmanApp/=8. Used only when WaveDirMod=0]	"]};
C(end+1,1) = {['	             0   DiffQTF        - Full difference-frequency 2nd-order forces computed with full QTF          {0: None; [10, 11, or 12]: WAMIT file to use}          [Only one of MnDrift, NewmanApp, or DiffQTF can be non-zero]	']};
C(end+1,1) = {['	             0   SumQTF         - Full summation -frequency 2nd-order forces computed with full QTF          {0: None; [10, 11, or 12]: WAMIT file to use}	']};
C(end+1,1) = {['	---------------------- PLATFORM ADDITIONAL STIFFNESS AND DAMPING  -------------- [unused with PotMod=0 or 2]	']};
C(end+1,1) = {['	             0   AddF0    - Additional preload (N, N-m) [If NBodyMod=1, one size 6*NBody x 1 vector; if NBodyMod>1, NBody size 6 x 1 vectors]	']};
C(end+1,1) = {['	0	']};
C(end+1,1) = {['	0	']};
C(end+1,1) = {['	0	']};
C(end+1,1) = {['	0	']};
C(end+1,1) = {['	0	']};
C(end+1,1) = {['	             0             0             0             0             0             0   AddCLin  - Additional linear stiffness (N/m, N/rad, N-m/m, N-m/rad)                     [If NBodyMod=1, one size 6*NBody x 6*NBody matrix; if NBodyMod>1, NBody size 6 x 6 matrices]	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0   AddBLin  - Additional linear damping(N/(m/s), N/(rad/s), N-m/(m/s), N-m/(rad/s))        [If NBodyMod=1, one size 6*NBody x 6*NBody matrix; if NBodyMod>1, NBody size 6 x 6 matrices]	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0   AddBQuad - Additional quadratic drag(N/(m/s)^2, N/(rad/s)^2, N-m(m/s)^2, N-m/(rad/s)^2) [If NBodyMod=1, one size 6*NBody x 6*NBody matrix; if NBodyMod>1, NBody size 6 x 6 matrices]	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	             0             0             0             0             0             0	']};
C(end+1,1) = {['	---------------------- AXIAL COEFFICIENTS --------------------------------------	']};
C(end+1,1) = {['	             1   NAxCoef        - Number of axial coefficients (-)	']};
C(end+1,1) = {['	AxCoefID  AxCd     AxCa     AxCp	']};
C(end+1,1) = {['	   (-)    (-)      (-)      (-)	']};
C(end+1,1) = {['	    1     0.00     0.00     1.00	']};

C(end+1,1) = {['---------------------- MEMBER JOINTS -------------------------------------------	']};
C(end+1,1) = {['2 NJoints - Number of joints (-) [must be exactly 0 or at least 2]	']};
C(end+1,1) = {['JointID Jointxi Jointyi Jointzi JointAxID JointOvrlp [JointOvrlp= 0: do nothing at joint, 1: eliminate overlaps by calculating super member]	']};
C(end+1,1) = {['(-) (m) (m) (m) (-) (switch)	']};
C(end+1,1) = {['1 0.00000 0.00000 ' num2str((HydroDyn.WaterDepth+0.1) *-1,4) ' 1 0	']};
C(end+1,1) = {['2 0.00000 0.00000 ' num2str((HydroDyn.Transition_Height+0.1),4) ' 1 0	']};


C(end+1,1) = {['---------------------- MEMBER CROSS-SECTION PROPERTIES -------------------------	']};
C(end+1,1) = {['1 NPropSets - Number of member property sets (-)	']};
C(end+1,1) = {['PropSetID PropD PropThck	']};
C(end+1,1) = {['(-) (m) (m)	']};
C(end+1,1) = {['1 ' num2str(HydroDyn.Diameter,4) ' ' num2str(HydroDyn.Thickness,4)]};


C(end+1,1) = {['	---------------------- SIMPLE HYDRODYNAMIC COEFFICIENTS (model 1) --------------	']};
C(end+1,1) = {['	     SimplCd    SimplCdMG    SimplCa    SimplCaMG    SimplCp    SimplCpMG   SimplAxCd  SimplAxCdMG  SimplAxCa  SimplAxCaMG  SimplAxCp   SimplAxCpMG	']};
C(end+1,1) = {['	       (-)         (-)         (-)         (-)         (-)         (-)         (-)         (-)         (-)         (-)         (-)         (-)	']};
C(end+1,1) = {['	       1.00        1.00        1.00        1.00        1.00        1.00        1.00        0.00        0.00        1.00        1.00        1.00 	']};
C(end+1,1) = {['	---------------------- DEPTH-BASED HYDRODYNAMIC COEFFICIENTS (model 2) ---------	']};
C(end+1,1) = {['	             0   NCoefDpth       - Number of depth-dependent coefficients (-)	']};
C(end+1,1) = {['	Dpth      DpthCd   DpthCdMG   DpthCa   DpthCaMG       DpthCp   DpthCpMG   DpthAxCd   DpthAxCdMG   DpthAxCa   DpthAxCaMG   DpthAxCp   DpthAxCpMG	']};
C(end+1,1) = {['	(m)       (-)      (-)        (-)      (-)            (-)      (-)        (-)        (-)          (-)        (-)          (-)        (-)	']};
C(end+1,1) = {['	---------------------- MEMBER-BASED HYDRODYNAMIC COEFFICIENTS (model 3) --------	']};
C(end+1,1) = {['	             0   NCoefMembers       - Number of member-based coefficients (-)	']};
C(end+1,1) = {['	MemberID    MemberCd1     MemberCd2    MemberCdMG1   MemberCdMG2    MemberCa1     MemberCa2    MemberCaMG1   MemberCaMG2    MemberCp1     MemberCp2    MemberCpMG1   MemberCpMG2   MemberAxCd1   MemberAxCd2  MemberAxCdMG1 MemberAxCdMG2  MemberAxCa1   MemberAxCa2  MemberAxCaMG1 MemberAxCaMG2  MemberAxCp1  MemberAxCp2   MemberAxCpMG1   MemberAxCpMG2	']};
C(end+1,1) = {['	   (-)         (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)           (-)	']};
C(end+1,1) = {['	-------------------- MEMBERS -------------------------------------------------	']};
C(end+1,1) = {['	             1   NMembers       - Number of members (-)	']};
C(end+1,1) = {['	MemberID  MJointID1  MJointID2  MPropSetID1  MPropSetID2  MDivSize   MCoefMod  PropPot   [MCoefMod=1: use simple coeff table, 2: use depth-based coeff table, 3: use member-based coeff table] [ PropPot/=0 if member is modeled with potential-flow theory]	']};
C(end+1,1) = {['	  (-)        (-)        (-)         (-)          (-)        (m)      (switch)   (flag)	']};
C(end+1,1) = {['	    1         1          2           1            1         0.5000      1        FALSE	']};
C(end+1,1) = {['	---------------------- FILLED MEMBERS ------------------------------------------	']};
C(end+1,1) = {['	             0   NFillGroups     - Number of filled member groups (-) [If FillDens = DEFAULT, then FillDens = WtrDens; FillFSLoc is related to MSL2SWL]	']};
C(end+1,1) = {['	FillNumM FillMList             FillFSLoc     FillDens	']};
C(end+1,1) = {['	(-)      (-)                   (m)           (kg/m^3)	']};
C(end+1,1) = {['	---------------------- MARINE GROWTH -------------------------------------------	']};
C(end+1,1) = {['	             0   NMGDepths      - Number of marine-growth depths specified (-)	']};
C(end+1,1) = {['	MGDpth     MGThck       MGDens	']};
C(end+1,1) = {['	(m)        (m)         (kg/m^3)	']};
C(end+1,1) = {['	---------------------- MEMBER OUTPUT LIST --------------------------------------	']};
C(end+1,1) = {['	             0   NMOutputs      - Number of member outputs (-) [must be <= 99]	']};
C(end+1,1) = {['	MemberID   NOutLoc    NodeLocs [NOutLoc < 10; node locations are normalized distance from the start of the member, and must be >=0 and <= 1] [unused if NMOutputs=0]	']};
C(end+1,1) = {['	  (-)        (-)        (-)	']};
C(end+1,1) = {['	---------------------- JOINT OUTPUT LIST ---------------------------------------	']};
C(end+1,1) = {['	             0   NJOutputs      - Number of joint outputs [Must be < 10]	']};
C(end+1,1) = {['	   0           JOutLst        - List of JointIDs which are to be output (-)[unused if NJOutputs=0]	']};
C(end+1,1) = {['	---------------------- OUTPUT --------------------------------------------------	']};
C(end+1,1) = {['	True             HDSum          - Output a summary file [flag]	']};
C(end+1,1) = {['	False            OutAll         - Output all user-specified member and joint loads (only at each member end, not interior locations) [flag]	']};
C(end+1,1) = {['	             2   OutSwtch       - Output requested channels to: [1=Hydrodyn.out, 2=GlueCode.out, 3=both files]	']};
C(end+1,1) = {['	ES11.4e2       OutFmt         - Output format for numerical results (quoted string) [not checked for validity!]	']};
C(end+1,1) = {['	A11            OutSFmt        - Output format for header strings (quoted string) [not checked for validity!]	']};
C(end+1,1) = {['	---------------------- OUTPUT CHANNELS -----------------------------------------	']};
C(end+1,1) = {['	Wave1Elev               ']};
C(end+1,1) = {['END of output channels and end of file. (the word "END" must appear in the first 3 columns of this line)	']};

writecell(C,HydroDyn.FileName,QuoteStrings="none",FileType="text",WriteMode="overwrite");
end